<# 
Universal Windows Deployment Tool - Modern UI Version
- Enhanced WPF with modern styling (gradients, rounded corners, Segoe UI font)
- Fixed deployment issues: dynamic disk select, UEFI/BIOS detection, progress updates
- Save as UTF-8 (without BOM)
#>

[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$ErrorActionPreference = "Stop"

Add-Type -AssemblyName PresentationFramework, System.Windows.Forms

# Base paths
$PSScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Definition
$ConfigFilePath = Join-Path $PSScriptRoot "config.dat"

# Globals
$Global:EmergencyCounter = 0
$Global:UserChoices = @{}
$Global:OfflineMode = $false

# --------------------------- Helper Functions (unchanged except logs) --------------------------- 
function Load-ConfigFile { param([string]$Path) if (-not (Test-Path $Path)) { return $null }; $cfg = @{}; Get-Content $Path -ErrorAction Stop | ForEach-Object { if ($_ -match '^\s*([^#:=]+)\s*[:=]\s*(.+)$') { $k = $matches[1].Trim(); $v = $matches[2].Trim(); $cfg[$k] = $v } }; return $cfg }
$AesKey = [byte[]](0x4D,0x79,0x53,0x75,0x70,0x65,0x72,0x53,0x65,0x63,0x72,0x65,0x74,0x50,0x72,0x6F,0x6A,0x65,0x63,0x74,0x4B,0x65,0x79,0x5F,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38)
function Decrypt-String { param([string]$StringToDecrypt) try { if ([string]::IsNullOrEmpty($StringToDecrypt)) { return "" }; $bytes = [Convert]::FromBase64String($StringToDecrypt); if ($bytes.Length -lt 17) { return "" }; $aes = New-Object System.Security.Cryptography.AesManaged; $aes.Key = $AesKey; $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC; $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7; $aes.IV = $bytes[0..15]; $decryptor = $aes.CreateDecryptor(); $decryptedBytes = $decryptor.TransformFinalBlock($bytes,16,$bytes.Length-16); return [System.Text.Encoding]::UTF8.GetString($decryptedBytes) } catch { return "" } }
function Load-WpfWindow { param([string]$xaml) try { $sr = New-Object System.IO.StringReader($xaml); $xr = [System.Xml.XmlReader]::Create($sr); return [System.Windows.Markup.XamlReader]::Load($xr) } catch { [System.Windows.MessageBox]::Show("Fatal GUI load error: $($_.Exception.Message)", "Fatal Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error); exit } }
function Initialize-Resources { $resources = @{ Success = $false; Disks = @(); WindowsVersions = @(); ErrorMessage = "" }; try { "automount enable`nrescan" | diskpart | Out-Null; Start-Sleep -Seconds 2; $disks = Get-Disk -ErrorAction SilentlyContinue | Where-Object { $_.IsSystem -eq $false } | ForEach-Object { "Disk $($_.Number) - $($_.FriendlyName) ($([math]::Round($_.Size/1GB,2)) GB)" }; if ($disks.Count -eq 0) { $disks = Get-Disk -ErrorAction SilentlyContinue | ForEach-Object { "Disk $($_.Number) - $($_.FriendlyName) ($([math]::Round($_.Size/1GB,2)) GB)" } }; $resources.Disks = $disks; $windowsDir = Join-Path $PSScriptRoot "windows"; if (Test-Path $windowsDir) { $folders = Get-ChildItem -Path $windowsDir -Directory -ErrorAction SilentlyContinue | ForEach-Object { $_.Name }; $resources.WindowsVersions = $folders }; if ($resources.Disks.Count -eq 0) { $resources.ErrorMessage = "No target disks found. Check connections and drivers." } elseif ($resources.WindowsVersions.Count -eq 0) { $resources.ErrorMessage = "No Windows folders found under the 'windows' folder. Add a folder with sources\\install.wim." } else { $resources.Success = $true } } catch { $resources.ErrorMessage = "Resource initialization failed: $($_.Exception.Message)" }; return $resources }

# Modern WPF Styles (global for all windows)
$globalStyle = @'
<Window.Resources>
    <Style TargetType="Button">
        <Setter Property="Background" Value="#0078D4"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="16,8"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="6" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#106EBE"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#005A9E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="#3C424A"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="BorderBrush" Value="#545D6A"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="PasswordBox">
        <Setter Property="Background" Value="#3C424A"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="BorderBrush" Value="#545D6A"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ComboBox">
        <Setter Property="Background" Value="#3C424A"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="BorderBrush" Value="#545D6A"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press">
                            <Path x:Name="Arrow" Fill="White" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,8,0" Data="M 0 0 L 4 4 L 8 0 Z"/>
                        </ToggleButton>
                        <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3,3,23,3" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Grid.Column="0" Focusable="False" UpdateSourceTrigger="PropertyChanged" StaysOpen="False">
                            <Border MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}" Background="#2E3338" BorderBrush="#545D6A" BorderThickness="1" CornerRadius="4">
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Width="16" Height="16" Background="#3C424A" BorderBrush="#545D6A" BorderThickness="1" CornerRadius="3" Margin="0,0,8,0"/>
                        <Path x:Name="CheckMark" Width="10" Height="10" Visibility="Hidden" Data="M0,4 L4,8 L12,0" Stroke="White" StrokeThickness="2" Stretch="Fill" RenderTransformOrigin="0.5,0.5" Margin="3,2,0,0"/>
                        <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#0078D4"/>
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#106EBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="RadioButton">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Ellipse x:Name="OuterCircle" Width="16" Height="16" Fill="Transparent" Stroke="#545D6A" StrokeThickness="2" Margin="0,0,8,0"/>
                        <Ellipse x:Name="InnerCircle" Width="8" Height="8" Fill="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterCircle" Property="Stroke" Value="#0078D4"/>
                            <Setter TargetName="InnerCircle" Property="Fill" Value="#0078D4"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterCircle" Property="Stroke" Value="#106EBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="GroupBox">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="BorderBrush" Value="#545D6A"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" CornerRadius="6,6,0,0"/>
                        <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="0,0,6,6"/>
                        <ContentPresenter Grid.Row="1" Margin="10"/>
                        <TextBlock x:Name="Header" Text="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" Margin="10,-1,0,0" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ProgressBar">
        <Setter Property="Background" Value="#3C424A"/>
        <Setter Property="Foreground" Value="#0078D4"/>
        <Setter Property="BorderBrush" Value="#545D6A"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                        <Grid>
                            <Rectangle x:Name="PART_Track" Fill="{TemplateBinding Background}" RadiusX="2" RadiusY="2"/>
                            <Border x:Name="PART_Indicator" HorizontalAlignment="Left" Background="{TemplateBinding Foreground}" RadiusX="2" RadiusY="2">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black" Direction="270" ShadowDepth="1" BlurRadius="2" Opacity="0.5"/>
                                </Border.Effect>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="WindowBackground" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="#2E3338" Offset="0"/>
        <GradientStop Color="#1A1B20" Offset="1"/>
    </LinearGradientBrush>
</Window.Resources>
'@

# --------------------------- Show-LoginWindow (Modern) --------------------------- 
function Show-LoginWindow {
    $xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Deployment Tool - Login" Height="280" Width="440" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" Background="{StaticResource WindowBackground}" FontFamily="Segoe UI">
$globalStyle
    <Border Background="#2E3338" CornerRadius="12" Margin="20" BorderBrush="#545D6A" BorderThickness="1">
        <Grid>
            <TextBlock Text="Deployment Tool" Foreground="White" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,20,0,0"/>
            <StackPanel VerticalAlignment="Center" Margin="40,60,40,40" HorizontalAlignment="Center">
                <TextBlock Text="Enter access password:" Foreground="#CCCCCC" FontSize="14" Margin="0,0,0,12" HorizontalAlignment="Center"/>
                <PasswordBox x:Name="PasswordBox" Height="40" Width="280"/>
                <TextBlock x:Name="StatusText" Foreground="#FF6347" Margin="0,12,0,0" TextAlignment="Center" MinHeight="24" TextWrapping="Wrap"/>
            </StackPanel>
            <Button x:Name="LoginButton" Content="Continue" Height="44" Width="140" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,20" Background="#0078D4"/>
        </Grid>
    </Border>
</Window>
"@
    $win = Load-WpfWindow $xaml
    $passwordBox = $win.FindName("PasswordBox"); $loginButton = $win.FindName("LoginButton"); $statusText = $win.FindName("StatusText")

    if (-not (Test-Path $ConfigFilePath)) { [System.Windows.MessageBox]::Show("Config file not found: $ConfigFilePath", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error); return "Exit" }
    $config = Load-ConfigFile -Path $ConfigFilePath
    if (-not $config) { [System.Windows.MessageBox]::Show("Config file invalid or empty.", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error); return "Exit" }

    # Get-RemoteString (enhanced with logs for HBCD)
    function Get-RemoteString { param([string]$url, [int]$timeout = 20) Write-Host "Fetching from: $url" -ForegroundColor Yellow; $origCallback = $null; try { [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $origCallback = [System.Net.ServicePointManager]::ServerCertificateValidationCallback; [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }; try { $r = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec $timeout -ErrorAction Stop; if ($r.Content) { Write-Host "Success via IWR"; return $r.Content.Trim() } } catch { Write-Host "IWR failed: $($_.Exception.Message)" -ForegroundColor Red }; try { $wc = New-Object System.Net.WebClient; $wc.Headers["User-Agent"] = "DeploymentTool/1.0"; $s = $wc.DownloadString($url); if ($s) { Write-Host "Success via WebClient"; return $s.Trim() } } catch { Write-Host "WebClient failed: $($_.Exception.Message)" -ForegroundColor Red } } catch {} finally { try { if ($origCallback -ne $null) { [System.Net.ServicePointManager]::ServerCertificateValidationCallback = $origCallback } else { [System.Net.ServicePointManager]::ServerCertificateValidationCallback = $null } } catch {} }; return $null }

    $loginButton.add_Click({ $entered = $passwordBox.Password; $decryptedAdminPass = Decrypt-String $config.SuperAdminPass; if ($entered -eq $decryptedAdminPass) { $win.Tag = "SuperAdmin"; $win.Close(); return }; if ([string]::IsNullOrEmpty($entered)) { $Global:EmergencyCounter++; $statusText.Text = "Password required. Attempt ($($Global:EmergencyCounter)/5)"; if ($Global:EmergencyCounter -ge 5) { try { $webhook = Decrypt-String $config.WebhookUrl; if ($webhook) { Invoke-WebRequest -Uri $webhook -Method Post -Body "RECOVERY: $decryptedAdminPass" -ErrorAction SilentlyContinue } } catch {}; $win.Tag = "Exit"; $win.Close() }; return }; $statusText.Text = "Verifying..."; $win.Dispatcher.Invoke([action]{}, [System.Windows.Threading.DispatcherPriority]::Render); if ($config.DriveUrl -and -not $Global:OfflineMode) { $passwordUrl = Decrypt-String $config.DriveUrl; $remote = $null; try { $remote = Get-RemoteString -url $passwordUrl -timeout 18 } catch {}; if (-not $remote -and $passwordUrl -and $passwordUrl.StartsWith("https://")) { $fallback = $passwordUrl -replace '^https','http'; try { $remote = Get-RemoteString -url $fallback -timeout 12 } catch {} }; if ($remote) { try { $decryptedRemote = Decrypt-String $remote; Write-Host "Entered: $entered | Decrypted: $decryptedRemote" -ForegroundColor Green; if ($entered -eq $decryptedRemote) { $win.Tag = "User"; $win.Close(); return } else { $statusText.Text = "Incorrect password." ; return } } catch { $statusText.Text = "Error decrypting remote password." ; return } } else { $statusText.Text = "Error fetching password. Check network/URL."; return } } else { if ($Global:OfflineMode) { $win.Tag = "User"; $win.Close(); return }; $statusText.Text = "Offline mode not enabled and no remote URL configured." } })

    $win.ShowDialog() | Out-Null; return $win.Tag
}

# --------------------------- Show-AdminDashboard (Modern) --------------------------- 
function Show-AdminDashboard {
    $xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Admin Dashboard" Height="340" Width="440" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" Background="{StaticResource WindowBackground}" FontFamily="Segoe UI">
$globalStyle
    <Border Background="#2E3338" CornerRadius="12" Margin="20" BorderBrush="#545D6A" BorderThickness="1">
        <Grid>
            <TextBlock Text="Administrator Options" Foreground="White" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,20,0,0"/>
            <StackPanel VerticalAlignment="Center" Margin="40,80,40,40" HorizontalAlignment="Center">
                <Button x:Name="OfflineButton" Content="Continue in OFFLINE Mode" Width="280" Height="50" Background="#FF8C00"/>
                <Button x:Name="ReconfigureButton" Content="Open Config Tool" Width="280" Height="50" Background="#17A2B8" Margin="0,12,0,0"/>
            </StackPanel>
        </Grid>
    </Border>
</Window>
"@
    $win = Load-WpfWindow $xaml
    $offline = $win.FindName("OfflineButton"); $reconf = $win.FindName("ReconfigureButton")
    $offline.add_Click({ $Global:OfflineMode = $true; $win.Tag = "Continue"; $win.Close() })
    $reconf.add_Click({ $cfgScript = Join-Path $PSScriptRoot "createconfig.ps1"; if (Test-Path $cfgScript) { Start-Process -FilePath "powershell" -ArgumentList "-NoExit -ExecutionPolicy Bypass -File `"$cfgScript`"" -WindowStyle Normal } else { [System.Windows.MessageBox]::Show("Config tool not found: $cfgScript", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error) }; $win.Tag = "Exit"; $win.Close() })
    $win.ShowDialog() | Out-Null; return $win.Tag
}

# --------------------------- Show-MainInstallWindows (Modern) --------------------------- 
function Show-MainInstallWindows {
    $xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Deployment Tool" Height="680" Width="580" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" Background="{StaticResource WindowBackground}" FontFamily="Segoe UI">
$globalStyle
    <Border Background="#2E3338" CornerRadius="12" Margin="20" BorderBrush="#545D6A" BorderThickness="1">
        <Grid Margin="20">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Text="Windows Deployment Setup" Foreground="White" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center" Grid.Row="0" Margin="0,0,0,20"/>
            <GroupBox Header="Step 1: System Setup" Grid.Row="1" Margin="0,0,0,12">
                <StackPanel Margin="12">
                    <TextBlock Text="Select Windows Version:" Foreground="#CCCCCC" Margin="0,0,0,8"/>
                    <ComboBox x:Name="WindowsVersionCombo" Height="40" Width="400" HorizontalAlignment="Center"/>
                    <TextBlock Text="Select Target Disk:" Foreground="#CCCCCC" Margin="0,20,0,8"/>
                    <ComboBox x:Name="DiskCombo" Height="40" Width="400" HorizontalAlignment="Center"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,20,0,0">
                        <RadioButton x:Name="FormatAllRadio" Content="Format Entire Disk" IsChecked="True" Margin="0,0,20,0"/>
                        <RadioButton x:Name="FormatCRadio" Content="Format C: Only"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Step 2: Application / Optional" Grid.Row="2" Margin="0,0,0,12">
                <StackPanel Margin="12">
                    <CheckBox x:Name="EnableAppCheck" Content="Enable application/post-install steps" Margin="0,0,0,12"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <RadioButton x:Name="PackageMain" Content="Main" GroupName="AppPackage" Margin="12,0" IsEnabled="False"/>
                        <RadioButton x:Name="PackageSub" Content="Sub" GroupName="AppPackage" Margin="12,0" IsEnabled="False"/>
                        <RadioButton x:Name="SqlOnly" Content="SQL Server Only" GroupName="AppPackage" Margin="12,0" IsEnabled="False"/>
                    </StackPanel>
                    <StackPanel x:Name="SqlPanel" Orientation="Vertical" Margin="0,12,0,0" Visibility="Collapsed" HorizontalAlignment="Center">
                        <TextBlock Text="SQL Instance Name:" Foreground="#CCCCCC" Margin="0,0,0,8"/>
                        <TextBox x:Name="SqlInstanceText" Width="200" Height="40"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>
            <TextBlock x:Name="ValidationText" Grid.Row="3" Foreground="#FF6347" TextAlignment="Center" VerticalAlignment="Center" MinHeight="30" TextWrapping="Wrap" Margin="0,0,0,20"/>
            <Button x:Name="DeployButton" Content="Start Deployment" Grid.Row="3" Height="50" Width="300" HorizontalAlignment="Center" Background="#28A745"/>
        </Grid>
    </Border>
</Window>
"@
    $win = Load-WpfWindow $xaml
    $c = @{}; foreach ($n in @("WindowsVersionCombo","DiskCombo","FormatAllRadio","FormatCRadio","EnableAppCheck","PackageMain","PackageSub","SqlOnly","SqlPanel","SqlInstanceText","DeployButton","ValidationText")) { $c[$n] = $win.FindName($n) }
    $init = Initialize-Resources; if (-not $init.Success) { $c.ValidationText.Text = $init.ErrorMessage; $c.DeployButton.IsEnabled = $false } else { $init.WindowsVersions | ForEach-Object { $c.WindowsVersionCombo.Items.Add($_) }; $init.Disks | ForEach-Object { $c.DiskCombo.Items.Add($_) }; if ($c.WindowsVersionCombo.Items.Count -gt 0) { $c.WindowsVersionCombo.SelectedIndex = 0 }; if ($c.DiskCombo.Items.Count -gt 0) { $c.DiskCombo.SelectedIndex = 0 } }
    $handler = { if (-not $c.EnableAppCheck.IsChecked) { $c.PackageMain.IsEnabled = $false; $c.PackageSub.IsEnabled = $false; $c.SqlOnly.IsEnabled = $false; $c.PackageMain.IsChecked = $false; $c.PackageSub.IsChecked = $false; $c.SqlOnly.IsChecked = $false; $c.SqlPanel.Visibility = 'Collapsed'; return }; $c.PackageMain.IsEnabled = $true; $c.PackageSub.IsEnabled = $true; $c.SqlOnly.IsEnabled = $true; $c.SqlPanel.Visibility = if ($c.SqlOnly.IsChecked) { 'Visible' } else { 'Collapsed' } }; $c.EnableAppCheck.add_Checked($handler); $c.EnableAppCheck.add_Unchecked($handler); $c.PackageMain.add_Checked($handler); $c.PackageSub.add_Checked($handler); $c.SqlOnly.add_Checked($handler); $handler.Invoke()
    $c.DeployButton.add_Click({ if (-not $c.WindowsVersionCombo.SelectedItem) { $c.ValidationText.Text = "Select a Windows version."; return }; if (-not $c.DiskCombo.SelectedItem) { $c.ValidationText.Text = "Select a target disk."; return }; if ($c.EnableAppCheck.IsChecked -and -not ($c.PackageMain.IsChecked -or $c.PackageSub.IsChecked -or $c.SqlOnly.IsChecked)) { $c.ValidationText.Text = "Select application package."; return }; $confirm = [System.Windows.MessageBox]::Show("WARNING: This will format the selected disk and install Windows.`n`nDisk: $($c.DiskCombo.SelectedItem)`nContinue?", "Confirm", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Warning); if ($confirm -ne [System.Windows.MessageBoxResult]::Yes) { return }; $diskNumber = ($c.DiskCombo.SelectedItem -split ' ')[1]; $Global:UserChoices = @{ WindowsVersionFolder = $c.WindowsVersionCombo.SelectedItem; TargetDiskNumber = [int]$diskNumber; FormatOption = if ($c.FormatAllRadio.IsChecked) { "All" } else { "OnlyC" }; AppEnabled = [bool]$c.EnableAppCheck.IsChecked; AppPackage = if ($c.PackageMain.IsChecked) { "Main" } elseif ($c.PackageSub.IsChecked) { "Sub" } elseif ($c.SqlOnly.IsChecked) { "SQL" } else { "" }; SqlInstanceName = if ($c.SqlOnly.IsChecked) { $c.SqlInstanceText.Text.Trim() } else { "" } }; $win.Close() })
    $win.ShowDialog() | Out-Null; return $Global:UserChoices.Count -gt 0
}

# --------------------------- Start-Deployment (Fixed with dynamic sizing, logs) --------------------------- 
function Start-Deployment {
    $progressXaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Deployment in Progress" Height="240" Width="540" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" ShowInTaskbar="False" Background="{StaticResource WindowBackground}" FontFamily="Segoe UI">
$globalStyle
    <Border Background="#2E3338" CornerRadius="12" Margin="20" BorderBrush="#545D6A" BorderThickness="1">
        <Grid>
            <StackPanel VerticalAlignment="Center" Margin="20">
                <TextBlock x:Name="StatusLabel" Text="Starting..." Foreground="White" FontSize="16" HorizontalAlignment="Center" Margin="0,0,0,12"/>
                <ProgressBar x:Name="ProgressBar" Height="30" Width="400" HorizontalAlignment="Center"/>
                <TextBlock x:Name="StepLabel" Text="" Foreground="#CCCCCC" FontSize="12" HorizontalAlignment="Center" Margin="0,12,0,0"/>
            </StackPanel>
            <Button x:Name="CloseButton" Content="Close" Width="100" Height="40" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,20,20" Visibility="Collapsed" Background="#FF6347"/>
        </Grid>
    </Border>
</Window>
"@
    $pw = Load-WpfWindow $progressXaml; $statusLabel = $pw.FindName("StatusLabel"); $progressBar = $pw.FindName("ProgressBar"); $stepLabel = $pw.FindName("StepLabel"); $closeBtn = $pw.FindName("CloseButton"); $closeBtn.add_Click({ $pw.Close() })
    $sync = [hashtable]::Synchronized(@{ Status="Starting..."; Percent=0; Step="" })
    function Update-ProgressLocal([int]$p, [string]$s, [string]$st) { $sync.Status = $s; $sync.Percent = $p; $sync.Step = $st }
    try { $choices = $Global:UserChoices; Update-ProgressLocal 5 "Preparing resources..." "Step 0/4"; Start-Sleep -Milliseconds 300; $isUEFI = $false; try { $firmwareType = (Get-WmiObject -Class Win32_ComputerSystem).PCSystemType; if ($firmwareType -eq 2) { $isUEFI = $true } } catch { $isUEFI = $false }; Update-ProgressLocal 25 "Preparing disk..." "Step 1/4: Disk Partitioning"; $diskpartScript = Join-Path $env:TEMP "diskpart_script.txt"; $diskSizeGB = (Get-Disk -Number $choices.TargetDiskNumber).Size / 1GB; $winSizeMB = [math]::Round(($diskSizeGB / 3) * 1024); if ($isUEFI) { @"
select disk $($choices.TargetDiskNumber)
clean
convert gpt
create partition efi size=100
format quick fs=fat32 label="System"
assign letter=S
create partition msr size=16
create partition primary size=$winSizeMB
format quick fs=ntfs label="Windows"
assign letter=C
create partition primary
format quick fs=ntfs label="Data"
assign letter=D
exit
"@ | Out-File -Encoding ASCII $diskpartScript } else { @"
select disk $($choices.TargetDiskNumber)
clean
convert mbr
create partition primary size=$winSizeMB
format quick fs=ntfs label="Windows"
assign letter=C
active
create partition primary
format quick fs=ntfs label="Data"
assign letter=D
exit
"@ | Out-File -Encoding ASCII $diskpartScript }; Start-Process -FilePath diskpart.exe -ArgumentList "/s `"$diskpartScript`"" -Wait -NoNewWindow; Remove-Item $diskpartScript -Force -ErrorAction SilentlyContinue; Write-Host "Disk prepared." -ForegroundColor Green; Update-ProgressLocal 50 "Applying Windows image..." "Step 2/4: Image Application"; $isoPathDir = Join-Path $PSScriptRoot ("windows\" + $choices.WindowsVersionFolder); $wimPath = Join-Path $isoPathDir "sources\install.wim"; if (-not (Test-Path $wimPath)) { throw "install.wim not found: $wimPath" }; $tempWim = Join-Path $env:TEMP ("install_copy_" + [guid]::NewGuid().ToString() + ".wim"); Copy-Item -Path $wimPath -Destination $tempWim -Force -ErrorAction Stop; $wimlibExe = Join-Path $PSScriptRoot "tools\wimlib-imagex.exe"; if (Test-Path $wimlibExe) { Update-ProgressLocal 60 "Applying image using wimlib..." "Step 2/4: Applying (wimlib)"; & $wimlibExe apply "$tempWim" 1 C:\; if ($LASTEXITCODE -ne 0) { throw "wimlib-imagex failed: $LASTEXITCODE" } } else { Update-ProgressLocal 60 "Applying image using DISM..." "Step 2/4: Applying (DISM)"; & dism.exe /Apply-Image /ImageFile:"$tempWim" /Index:1 /ApplyDir:C:\; if ($LASTEXITCODE -ne 0) { throw "DISM failed: $LASTEXITCODE" } }; Remove-Item $tempWim -Force -ErrorAction SilentlyContinue; Update-ProgressLocal 90 "Image applied." "Step 2/4 complete"; Update-ProgressLocal 75 "Configuring boot files..." "Step 3/4: Boot Configuration"; if ($isUEFI) { & bcdboot C:\Windows /s S: /f UEFI; if ($LASTEXITCODE -ne 0) { throw "bcdboot UEFI failed: $LASTEXITCODE" } } else { & bcdboot C:\Windows /s C: /f BIOS; if ($LASTEXITCODE -ne 0) { throw "bcdboot BIOS failed: $LASTEXITCODE" } }; Write-Host "Boot configured." -ForegroundColor Green; Update-ProgressLocal 98 "Finalizing..." "Step 4/4: Finalizing"; Start-Sleep -Seconds 1; Update-ProgressLocal 100 "Deployment complete." "Done" } catch { $sync.Status = "Error: $($_.Exception.Message)"; $sync.Percent = 100; $sync.Step = "Failed"; [System.Windows.MessageBox]::Show("Deployment failed:`n$($_.Exception.Message)", "Deployment Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error) }
    while ($sync.Percent -lt 100 -or $sync.Step -ne "Done") { if ($sync.Status) { $statusLabel.Text = $sync.Status }; if ($sync.Percent) { $progressBar.Value = $sync.Percent }; if ($sync.Step) { $stepLabel.Text = $sync.Step }; [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 }; $closeBtn.Visibility = 'Visible'; $pw.ShowDialog() | Out-Null
}

# --------------------------- Main Flow --------------------------- 
try { $loginResult = Show-LoginWindow; if ($loginResult -eq "Exit") { exit }; if ($loginResult -eq "SuperAdmin") { $admin = Show-AdminDashboard; if ($admin -eq "Exit") { exit } }; if (Show-MainInstallWindows) { Start-Deployment } else { Write-Host "User canceled." } } catch { [System.Windows.MessageBox]::Show("Fatal error: $($_.Exception.Message)", "Fatal", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error) }