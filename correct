Update-Progress 25 "Preparing disk..." "Step 1/4: Disk Partitioning"

# Detect firmware type: 1 = BIOS, 2 = UEFI
$firmwareType = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control").PEFirmwareType
$isUEFI = $false
if ($firmwareType -eq 2) { $isUEFI = $true }

# DiskPart script path
$diskpartScript = Join-Path $env:TEMP "diskpart_script.txt"

if ($isUEFI) {
    # UEFI - GPT layout
    @"
select disk 0
clean
convert gpt
create partition efi size=100
format quick fs=fat32 label="System"
assign letter=S
create partition msr size=16
create partition primary
format quick fs=ntfs label="Windows"
assign letter=C
exit
"@ | Out-File -Encoding ASCII $diskpartScript
} else {
    # Legacy BIOS - MBR layout
    @"
select disk 0
clean
convert mbr
create partition primary
format quick fs=ntfs label="Windows"
assign letter=C
active
exit
"@ | Out-File -Encoding ASCII $diskpartScript
}

Start-Process -FilePath diskpart.exe -ArgumentList "/s `"$diskpartScript`"" -Wait -NoNewWindow

Write-Host "Disk prepared successfully."
.
.
.

.
.
.
Update-Progress 75 "Configuring boot files..." "Step 3/4: Boot Configuration"

try {
    if ($isUEFI) {
        & bcdboot C:\Windows /s S: /f UEFI
    } else {
        & bcdboot C:\Windows /s C: /f BIOS
    }
    if ($LASTEXITCODE -ne 0) {
        throw "bcdboot failed with exit code $LASTEXITCODE"
    }
}
catch {
    [System.Windows.MessageBox]::Show("Boot configuration failed:`n$($_.Exception.Message)", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
    throw
}

Write-Host "Boot files configured successfully."
.
.
.
.
.
.
.
.
.
# --- Step 2: Application Setup Window ---
[xml]$xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Application Setup" Height="400" Width="600" WindowStartupLocation="CenterScreen" Background="#FFEEEEEE">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Windows version selection -->
        <StackPanel Grid.Row="0" Orientation="Vertical" Margin="0,0,0,10">
            <TextBlock Text="Select Windows Version:" FontWeight="Bold" Margin="0,0,0,5"/>
            <ComboBox x:Name="cmbWindowsVersion" Width="300" Height="25"/>
        </StackPanel>

        <!-- Application type selection -->
        <StackPanel Grid.Row="1" Orientation="Vertical">
            <TextBlock Text="Select Application Type:" FontWeight="Bold" Margin="0,0,0,5"/>
            <ComboBox x:Name="cmbApplication" Width="300" Height="25" Margin="0,0,0,10">
                <ComboBoxItem Content="Morabaa7"/>
                <ComboBoxItem Content="Restaurant"/>
                <ComboBoxItem Content="Other"/>
            </ComboBox>

            <!-- RadioGroup for sub/main -->
            <StackPanel x:Name="radioGroupPanel" Orientation="Horizontal" Visibility="Collapsed" Margin="0,10,0,0">
                <RadioButton x:Name="rbMain" Content="Main" GroupName="AppMode" Margin="0,0,20,0"/>
                <RadioButton x:Name="rbSub" Content="Sub" GroupName="AppMode"/>
            </StackPanel>
        </StackPanel>

        <!-- OK button -->
        <Button x:Name="btnOk" Grid.Row="2" Content="OK" Width="80" Height="30" HorizontalAlignment="Right"/>
    </Grid>
</Window>
"@

# Load XAML
Add-Type -AssemblyName PresentationFramework
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [Windows.Markup.XamlReader]::Load($reader)

$cmbWindowsVersion = $window.FindName("cmbWindowsVersion")
$cmbApplication    = $window.FindName("cmbApplication")
$radioGroupPanel   = $window.FindName("radioGroupPanel")
$btnOk             = $window.FindName("btnOk")

# Fill Windows versions (folders under windows\)
$winFolders = Get-ChildItem -Path (Join-Path $PSScriptRoot "windows") -Directory
foreach ($folder in $winFolders) {
    $cmbWindowsVersion.Items.Add($folder.Name) | Out-Null
}

# Show/hide RadioGroup when Application changes
$cmbApplication.Add_SelectionChanged({
    $selected = $cmbApplication.SelectedItem.Content
    if ($selected -eq "Morabaa7" -or $selected -eq "Restaurant") {
        $radioGroupPanel.Visibility = "Visible"
    } else {
        $radioGroupPanel.Visibility = "Collapsed"
    }
})

$btnOk.Add_Click({
    if (-not $cmbWindowsVersion.SelectedItem) {
        [System.Windows.MessageBox]::Show("Please select a Windows version.", "Warning", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
    $window.DialogResult = $true
    $window.Close()
})

# Show the window
$null = $window.ShowDialog()
