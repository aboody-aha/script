    $syncHash = [hashtable]::Synchronized(@{}); $ps = [powershell]::Create().AddScript({
        param($choices, $syncHash, $ScriptPath)
        
        function Update-Progress {
            [CmdletBinding(SupportsShouldProcess = $true)]
            param(
                [Parameter(Mandatory = $true)][int]$Percent,
                [Parameter(Mandatory = $true)][string]$Status,
                [Parameter(Mandatory = $true)][string]$Step
            )
            $script:Status = $Status
            $script:Percent = $Percent
            $script:Step = $Step
        }
        
        try {
            $isUEFI = $true; try { Get-FirmwareType -ErrorAction Stop | Out-Null } catch { $isUEFI = $false }
            # (استمر بالكود السابق هنا حتى نهاية الكود الداخلي)
            Update-Progress -Percent 100 -Status "Deployment completed!" -Step "Done"
            Start-Sleep -Seconds 2
        } catch {
            Update-Progress -Percent 0 -Status "Deployment failed: $($_.Exception.Message)" -Step "Error"
            Start-Sleep -Seconds 5
        } finally {
            if (Test-Path $tempScriptPath) { Remove-Item $tempScriptPath -Force }
        }
    }).AddArgument($Global:UserChoices).AddArgument($syncHash).AddArgument($ScriptPath)

.
.
.
.
function Show-MainInstallWindows {
    [string]$xamlString = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Deployment Tool" Height="650" Width="550" WindowStartupLocation="CenterScreen" Background="#2E3338" ResizeMode="NoResize">
    <Grid Margin="15">
        <Grid.RowDefinitions><RowDefinition Height="Auto"/><RowDefinition Height="Auto"/><RowDefinition Height="*"/><RowDefinition Height="Auto"/></Grid.RowDefinitions>
        <GroupBox Header="Step 1: System Setup" Grid.Row="0" Foreground="White" FontWeight="Bold" Margin="0,5" Padding="10">
            <StackPanel>
                <TextBlock Text="Select Windows Version:" Foreground="#CCCCCC" Margin="0,0,0,5"/><ComboBox x:Name="WindowsVersionCombo" Height="30" Margin="0,0,0,10"/>
                <TextBlock Text="Select Target Disk:" Foreground="#CCCCCC" Margin="0,0,0,5"/><ComboBox x:Name="DiskCombo" Height="30" Margin="0,0,0,10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"><RadioButton x:Name="FormatAllRadio" Content="Format Entire Disk" IsChecked="True" Foreground="White" Margin="0,0,20,0"/><RadioButton x:Name="FormatCRadio" Content="Format C: Only" Foreground="White"/></StackPanel>
            </StackPanel>
        </GroupBox>
        <GroupBox Header="Step 2: Application Setup" Grid.Row="1" Foreground="White" FontWeight="Bold" Margin="0,10" Padding="10">
            <StackPanel>
                <CheckBox x:Name="EnableAppCheck" Content="Enable Application / Post-install steps" Foreground="White" IsChecked="False" Margin="0,0,0,10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <RadioButton x:Name="Morabaa7Radio" Content="Morabaa7" GroupName="AppPackage" Foreground="White" Margin="10,0" IsEnabled="False"/>
                    <RadioButton x:Name="RestaurantRadio" Content="Restaurant" GroupName="AppPackage" Foreground="White" Margin="10,0" IsEnabled="False"/>
                    <RadioButton x:Name="Sql19Radio" Content="SQL19 Only" GroupName="AppPackage" Foreground="White" Margin="10,0" IsEnabled="False"/>
                </StackPanel>
                <StackPanel x:Name="SubOptionsPanel" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,15,0,0" Visibility="Collapsed">
                    <RadioButton x:Name="MainRadio" Content="Main" GroupName="SubOption" IsChecked="True" Foreground="White" Margin="10,0"/><RadioButton x:Name="SubRadio" Content="Sub" GroupName="SubOption" Foreground="White" Margin="10,0"/>
                </StackPanel>
                <StackPanel x:Name="SqlInstancePanel" Orientation="Vertical" Margin="10,12,10,0" Visibility="Collapsed">
                    <TextBlock Text="SQL Instance Name:" Foreground="#CCCCCC" Margin="0,0,0,5"/>
                    <TextBox x:Name="SqlInstanceText" Height="30" FontSize="14" Background="#3C424A" Foreground="White" BorderBrush="#545D6A" Padding="5"/>
                </StackPanel>
            </StackPanel>
        </GroupBox>
        <TextBlock x:Name="ValidationText" Grid.Row="2" Foreground="#FF6347" TextAlignment="Center" VerticalAlignment="Center" MinHeight="20" TextWrapping="Wrap"/>
        <Button x:Name="DeployButton" Content="Start Deployment" Grid.Row="3" Height="50" Background="#28A745" Foreground="White" FontSize="18" FontWeight="Bold"/>
    </Grid>
</Window>
'@
    $window = Load-WpfWindow $xamlString
    $controls = @{}; foreach ($name in @("WindowsVersionCombo","DiskCombo","FormatAllRadio","FormatCRadio","Morabaa7Radio","RestaurantRadio","Sql19Radio","SubOptionsPanel","MainRadio","SubRadio","DeployButton","ValidationText","EnableAppCheck","SqlInstancePanel","SqlInstanceText")) { $controls[$name] = $window.FindName($name) }
    $initResult = Initialize-Resources
    if (-not $initResult.Success) { $controls.ValidationText.Text = $initResult.ErrorMessage; $controls.DeployButton.IsEnabled = $false }
    else {
        $initResult.WindowsVersions | ForEach-Object { $controls.WindowsVersionCombo.Items.Add($_) }; $initResult.Disks | ForEach-Object { $controls.DiskCombo.Items.Add($_) }
        if ($controls.WindowsVersionCombo.Items.Count -gt 0) { $controls.WindowsVersionCombo.SelectedIndex = 0 }; if ($controls.DiskCombo.Items.Count -gt 0) { $controls.DiskCombo.SelectedIndex = 0 }
    }
    $appRadioHandler = {
        if (-not $controls.EnableAppCheck.IsChecked) {
            $controls.Morabaa7Radio.IsEnabled = $false; $controls.RestaurantRadio.IsEnabled = $false; $controls.Sql19Radio.IsEnabled = $false
            $controls.Morabaa7Radio.IsChecked = $false; $controls.RestaurantRadio.IsChecked = $false; $controls.Sql19Radio.IsChecked = $false
            $controls.SubOptionsPanel.Visibility = 'Collapsed'; $controls.SqlInstancePanel.Visibility = 'Collapsed'; return
        }
        $controls.Morabaa7Radio.IsEnabled = $true; $controls.RestaurantRadio.IsEnabled = $true; $controls.Sql19Radio.IsEnabled = $true
        $controls.SubOptionsPanel.Visibility = if ($controls.Morabaa7Radio.IsChecked -or $controls.RestaurantRadio.IsChecked) { 'Visible' } else { 'Collapsed' }
        $controls.SqlInstancePanel.Visibility = if ($controls.Sql19Radio.IsChecked) { 'Visible' } else { 'Collapsed' }
    }
    $controls.EnableAppCheck.add_Checked($appRadioHandler); $controls.EnableAppCheck.add_Unchecked($appRadioHandler); $controls.Morabaa7Radio.add_Checked($appRadioHandler); $controls.RestaurantRadio.add_Checked($appRadioHandler); $controls.Sql19Radio.add_Checked($appRadioHandler)
    $appRadioHandler.Invoke()
    $controls.DeployButton.add_Click({
        if (-not $controls.WindowsVersionCombo.SelectedItem) { $controls.ValidationText.Text = "Select Windows Version."; return }; if (-not $controls.DiskCombo.SelectedItem) { $controls.ValidationText.Text = "Select Target Disk."; return }
        if ($controls.EnableAppCheck.IsChecked) {
            if (-not ($controls.Morabaa7Radio.IsChecked -or $controls.RestaurantRadio.IsChecked -or $controls.Sql19Radio.IsChecked)) { $controls.ValidationText.Text = "Select Application Package."; return }
        }
        $confirm = [System.Windows.MessageBox]::Show("WARNING: This will format disk and install Windows.`n`nDisk: $($controls.DiskCombo.SelectedItem)`n`nContinue?","Final Confirmation",[System.Windows.MessageBoxButton]::YesNo,[System.Windows.MessageBoxImage]::Warning)
        if ($confirm -ne [System.Windows.MessageBoxResult]::Yes) { return }
        $Global:UserChoices = @{
            WindowsVersionFolder = $controls.WindowsVersionCombo.SelectedItem; TargetDiskNumber = ($controls.DiskCombo.SelectedItem -split ' ')[1]; FormatOption = if ($controls.FormatAllRadio.IsChecked) { "All Hard" } else { "Only C" }
            SoftwarePackage = if (-not $controls.EnableAppCheck.IsChecked) { "" } elseif ($controls.Morabaa7Radio.IsChecked) { "Morabaa7" } elseif ($controls.RestaurantRadio.IsChecked) { "Restaurant" } else { "SQL19" }
            SubOption = if ($controls.EnableAppCheck.IsChecked -and ($controls.Morabaa7Radio.IsChecked -or $controls.RestaurantRadio.IsChecked) -and $controls.MainRadio.IsChecked) { "Main" } else { "" }
            AppEnabled = [bool]$controls.EnableAppCheck.IsChecked
            SqlInstanceName = if ($controls.Sql19Radio.IsChecked -and $controls.SqlInstancePanel.Visibility -eq 'Visible') { $controls.SqlInstanceText.Text.Trim() } else { "" }
        }; $window.Close()
    })
    $window.ShowDialog() | Out-Null; return $Global:UserChoices.Count -gt 0
}
.
.
.
.
.
.
.
.
.
function Show-AdminDashboard {
    [string]$xamlString = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Admin Dashboard" Height="350" Width="500" WindowStartupLocation="CenterScreen" Background="#2E3338" ResizeMode="NoResize">
    <Grid Margin="20">
        <TextBlock Text="Admin Dashboard" Foreground="White" FontSize="18" FontWeight="Bold" Margin="0,0,0,20" HorizontalAlignment="Center"/>
        <StackPanel VerticalAlignment="Center">
            <Button x:Name="OfflineButton" Content="Continue in OFFLINE Mode" Height="50" Background="#FF8C00" Foreground="White" FontSize="16" Margin="0,0,0,15"/>
            <Button x:Name="ReconfigureButton" Content="Launch Config Tool" Height="50" Background="#17A2B8" Foreground="White" FontSize="16"/>
        </StackPanel>
    </Grid>
</Window>
'@
    $window = Load-WpfWindow $xamlString
    $offlineButton = $window.FindName("OfflineButton"); $reconfigureButton = $window.FindName("ReconfigureButton")
    $offlineButton.add_Click({ $Global:OfflineMode = $true; $window.Tag = "Continue"; $window.Close() })
    $reconfigureButton.add_Click({ 
        $configScriptPath = Join-Path $PSScriptRoot "createconfig.ps1"
        if (Test-Path $configScriptPath) {
            Start-Process -FilePath "powershell" -ArgumentList "-ExecutionPolicy Bypass -File '$configScriptPath'" -WindowStyle Normal
        } else {
            [System.Windows.MessageBox]::Show("Config script not found at: $configScriptPath","Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error)
        }
        $window.Tag = "Exit"; $window.Close() 
    })
    $window.ShowDialog() | Out-Null; return $window.Tag
}
.
.
.
.
.
.
.
.
.
.
# =================================================================
#               Configuration File Generator - GUI Version
#               FINAL, GUARANTEED FIX for the AES Key Size Error.
# =================================================================

# --- [ Initial Configuration ] ---
$OutputEncoding = [System.Text.Encoding]::UTF8
Add-Type -AssemblyName PresentationFramework, System.Windows.Forms, System.Xml.Linq

$App = [System.Windows.Application]::new()
$App.ShutdownMode = [System.Windows.ShutdownMode]::OnExplicitShutdown

# --- [ Encryption Function - RADICALLY CORRECTED KEY DEFINITION ] ---

# We are now creating the byte array for the key MANUALLY and EXPLICITLY.
# This guarantees it is exactly 32 bytes (256 bits) long, avoiding any PowerShell string interpretation issues.
$AesKey = [byte[]](
    0x4D, 0x79, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x6F,
    0x6A, 0x65, 0x63, 0x74, 0x4B, 0x65, 0x79, 0x5F, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38
)

function Encrypt-String {
    param([string]$StringToEncrypt)
    $aes = New-Object System.Security.Cryptography.AesManaged
    $aes.Key = $AesKey # This will now work without error.
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    $aes.GenerateIV()
    $encryptor = $aes.CreateEncryptor()
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($StringToEncrypt)
    $encryptedBytes = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length)
    $ivBytes = $aes.IV
    [System.Convert]::ToBase64String($ivBytes + $encryptedBytes)
}

# --- [ GUI Helper Function ] ---
function Load-WpfWindow {
    param([xml]$xaml)
    try {
        $reader = $xaml.CreateNavigator().ReadSubtree()
        return [System.Windows.Markup.XamlReader]::Load($reader)
    } catch {
        [System.Windows.MessageBox]::Show("Fatal Error loading GUI: $($_.Exception.Message)", "Fatal Error", "OK", "Error")
        exit
    }
}

# --- [ GUI Definition ] ---
[string]$xamlString = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Initial Configuration Generator" Height="550" Width="600" WindowStartupLocation="CenterScreen" Background="#2E3338" ResizeMode="NoResize">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="Configuration Generator" Foreground="White" FontSize="20" FontWeight="Bold" Margin="0,0,0,20" HorizontalAlignment="Center"/>

        <StackPanel Grid.Row="1">
            <TextBlock Text="Super Admin Password:" Foreground="#CCCCCC" Margin="0,0,0,5"/>
            <TextBox x:Name="SuperAdminPassText" Height="30" Margin="0,0,0,15" Text="55643210"/>

            <TextBlock Text="Initial User Password:" Foreground="#CCCCCC" Margin="0,0,0,5"/>
            <TextBox x:Name="UserPassText" Height="30" Margin="0,0,0,15" Text="user123"/>

            <TextBlock Text="Google Drive URL (for user pass ):" Foreground="#CCCCCC" Margin="0,0,0,5"/>
            <TextBox x:Name="DriveUrlText" Height="30" Margin="0,0,0,15" Text="https://google.com/document/d/15isHT2Aic2ZmMPrXhX_2cbXigc1Wl8Se068WpQeN_Vs/edit?usp=drive_link"/>

            <TextBlock Text="Webhook URL (for recovery ):" Foreground="#CCCCCC" Margin="0,0,0,5"/>
            <TextBox x:Name="WebhookUrlText" Height="30" Margin="0,0,0,20" Text="https://webhook.site/c255b1a6-3d24-4d0d-b87a-99a1ecab2269"/>
            
            <TextBlock Text="Encrypted User Password (for Google Drive ):" Foreground="#CCCCCC" Margin="0,10,0,5"/>
            <TextBox x:Name="EncryptedUserPassOutput" Height="30" IsReadOnly="True" Background="#444" Foreground="White"/>
        </StackPanel>

        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="EncryptButton" Content="Encrypt &amp; Copy User Pass" Height="40" Width="200" Margin="0,0,10,0" Background="#007ACC" Foreground="White"/>
            <Button x:Name="DoneButton" Content="Generate config.dat &amp; Exit" Height="40" Width="200" Background="#28A745" Foreground="White"/>
        </StackPanel>
    </Grid>
</Window>
'@

# --- [ GUI Logic ] ---
$window = Load-WpfWindow ([xml]$xamlString)

# Find controls
$controls = @{}
"SuperAdminPassText", "UserPassText", "DriveUrlText", "WebhookUrlText", "EncryptedUserPassOutput", "EncryptButton", "DoneButton" | ForEach-Object {
    $controls[$_] = $window.FindName($_)
}

# Encrypt Button Logic
$controls.EncryptButton.add_Click({
    if ([string]::IsNullOrWhiteSpace($controls.UserPassText.Text)) {
        [System.Windows.MessageBox]::Show("Please enter a user password first.", "Warning", "OK", "Warning")
        return
    }
    $encryptedUserPass = Encrypt-String $controls.UserPassText.Text
    $controls.EncryptedUserPassOutput.Text = $encryptedUserPass
    Set-Clipboard -Value $encryptedUserPass
    [System.Windows.MessageBox]::Show("The encrypted user password has been generated and copied to your clipboard. Paste it into your Google Drive text file.", "Success", "OK", "Information")
})

# Done Button Logic
$controls.DoneButton.add_Click({
    $encryptedSuperAdminPass = Encrypt-String $controls.SuperAdminPassText.Text
    $encryptedDriveUrl = Encrypt-String $controls.DriveUrlText.Text
    $encryptedWebhookUrl = Encrypt-String $controls.WebhookUrlText.Text

    $configFileContent = @"
SuperAdminPass:$encryptedSuperAdminPass
DriveUrl:$encryptedDriveUrl
WebhookUrl:$encryptedWebhookUrl
"@

    try {
        $configFileContent | Out-File -FilePath ".\config.dat" -Encoding utf8 -Force
        [System.Windows.MessageBox]::Show("'config.dat' file has been created successfully!", "Success", "OK", "Information")
        $window.Close()
    } catch {
        [System.Windows.MessageBox]::Show("Error writing 'config.dat': $($_.Exception.Message)", "Error", "OK", "Error")
    }
})

# Show the window
$window.ShowDialog() | Out-Null
$App.Shutdown()

Read-Host "Press Enter to exit"
.
.
.. 
.
.
.
.
.. 
.
.
.
$reconfigureButton.add_Click({ 
    $configScriptPath = Join-Path $PSScriptRoot "createconfig.ps1"
    if (Test-Path $configScriptPath) {
        Start-Process -FilePath "powershell" -ArgumentList "-NoExit -ExecutionPolicy Bypass -File '$configScriptPath'" -WindowStyle Normal
    } else {
        [System.Windows.MessageBox]::Show("Config script not found at: $configScriptPath","Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error)
    }
    $window.Tag = "Exit"; $window.Close() 
})