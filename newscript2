# Universal Windows Deployment Tool - FINAL CORRECTED VERSION (v5.1)
# ---------------------------------------------------------
# - تم تصحيح جميع أخطاء ParserError المتعلقة بعلامات الاقتباس.
# - تم إجراء مراجعة شاملة لضمان عدم وجود أخطاء تركيبية أخرى.
# - تم تعديل مسار ملف التكوين ليعمل مع ملف BAT
# ---------------------------------------------------------

# 1. إعداد عام
$OutputEncoding = [System.Text.Encoding]::UTF8
Add-Type -AssemblyName PresentationFramework, System.Windows.Forms

# استخدام المسار الصحيح المطلق بدلاً من المسار النسبي
$PSScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Definition
$ConfigFilePath = Join-Path $PSScriptRoot "config.dat"
$Global:EmergencyCounter = 0
$Global:UserChoices = @{}
$Global:OfflineMode = $false

# التحقق من وجود ملف التكوين
if (-not (Test-Path $ConfigFilePath)) {
    [System.Windows.MessageBox]::Show("Config file not found at:`n$ConfigFilePath","Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error)
    exit
}

# 2. الدوال المساعدة
function Load-ConfigFile { param([string]$Path)
    $cfg = @{}; if (-not (Test-Path $Path)) { return $null }; Get-Content $Path | ForEach-Object { if ($_ -match '^\s*([^:#=]+)\s*[:=]\s*(.+)$') { $key = $matches[1].Trim(); $val = $matches[2].Trim(); $cfg[$key] = $val } }; return $cfg
}
$AesKey = [byte[]](0x4D,0x79,0x53,0x75,0x70,0x65,0x72,0x53,0x65,0x63,0x72,0x65,0x74,0x50,0x72,0x6F,0x6A,0x65,0x63,0x74,0x4B,0x65,0x79,0x5F,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38)
function Decrypt-String { param([string]$StringToDecrypt)
    try { if ([string]::IsNullOrEmpty($StringToDecrypt)) { return "" }; $bytes = [System.Convert]::FromBase64String($StringToDecrypt); if ($bytes.Length -lt 17) { return "" }; $aes = New-Object System.Security.Cryptography.AesManaged; $aes.Key = $AesKey; $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC; $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7; $aes.IV = $bytes[0..15]; $decryptor = $aes.CreateDecryptor(); $decryptedBytes = $decryptor.TransformFinalBlock($bytes, 16, $bytes.Length - 16); return [System.Text.Encoding]::UTF8.GetString($decryptedBytes) } catch { return "" }
}
function Load-WpfWindow { param([string]$xaml)
    try { $stringReader = New-Object System.IO.StringReader($xaml); $xmlReader = [System.Xml.XmlReader]::Create($stringReader); return [System.Windows.Markup.XamlReader]::Load($xmlReader) } catch { [System.Windows.MessageBox]::Show("Fatal Error loading GUI: $($_.Exception.Message)","Fatal Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error); exit }
}
function Initialize-Resources {
    $resources = @{ Success = $false; Disks = @(); WindowsVersions = @(); ErrorMessage = "" }
    try { "automount enable`nrescan" | diskpart | Out-Null; Start-Sleep -Seconds 5 } catch {}
    $maxRetries = 5; $retryInterval = 3
    for ($i = 1; $i -le $maxRetries; $i++) {
        try {
            $diskList = Get-Disk | Where-Object { $_.IsSystem -eq $false -and $_.BusType -ne 'USB' } | ForEach-Object { "Disk $($_.Number) - $($_.FriendlyName) ($([math]::Round($_.Size / 1GB,2)) GB)" }
            if ($diskList.Count -gt 0) { $resources.Disks = $diskList; break }
        } catch {}; Start-Sleep -Seconds $retryInterval
    }
    $windowsDir = Join-Path $PSScriptRoot "windows"
    for ($i = 1; $i -le $maxRetries; $i++) {
        if (Test-Path $windowsDir) {
            try {
                $versionList = Get-ChildItem -Path $windowsDir -Directory -ErrorAction Stop | ForEach-Object { $_.Name }
                if ($versionList.Count -gt 0) { $resources.WindowsVersions = $versionList; break }
            } catch {}
        }
        Start-Sleep -Seconds $retryInterval
    }
    if ($resources.Disks.Count -eq 0) { $resources.ErrorMessage = "ERROR: No suitable target disks found. Check connections and drivers." }
    elseif ($resources.WindowsVersions.Count -eq 0) { $resources.ErrorMessage = "ERROR: 'windows' folder not found or is empty. Ensure it's next to the script's parent folder." }
    else { $resources.Success = $true }
    return $resources
}

# 3. النوافذ (WPF)
function Show-LoginWindow {
    [string]$xamlString = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="System Access Control" Height="250" Width="400" WindowStartupLocation="CenterScreen" WindowStyle="None" AllowsTransparency="True" Background="Transparent" ResizeMode="NoResize">
    <Border Background="#2E3338" CornerRadius="10" BorderBrush="#545D6A" BorderThickness="1">
        <Grid>
            <TextBlock Text="Deployment Tool Login" Foreground="White" FontSize="16" FontWeight="Bold" Margin="15,10,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <StackPanel VerticalAlignment="Center" Margin="20,50,20,20">
                <TextBlock Text="Enter Access Password:" Foreground="#CCCCCC" FontSize="14" Margin="0,0,0,5"/>
                <PasswordBox x:Name="PasswordBox" Height="30" FontSize="14" Background="#3C424A" Foreground="White" BorderBrush="#545D6A" Padding="5"/>
                <TextBlock x:Name="StatusText" Foreground="#FF6347" Margin="0,10,0,0" TextAlignment="Center" MinHeight="20"/>
            </StackPanel>
            <Button x:Name="LoginButton" Content="Continue" Margin="0,0,20,20" Height="40" Width="120" Background="#007ACC" Foreground="White" FontSize="16" BorderThickness="0" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
        </Grid>
    </Border>
</Window>
'@
    $window = Load-WpfWindow $xamlString
    $passwordBox = $window.FindName("PasswordBox"); $loginButton = $window.FindName("LoginButton"); $statusText = $window.FindName("StatusText")
    if (-not (Test-Path $ConfigFilePath)) { [System.Windows.MessageBox]::Show("Config file not found.","Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error); return "Exit" }
    $config = Load-ConfigFile -Path $ConfigFilePath
    if (-not $config) { [System.Windows.MessageBox]::Show("Config file invalid or empty.","Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error); return "Exit" }
    $loginButton.add_Click({
        $enteredPassword = $passwordBox.Password; $decryptedAdminPass = Decrypt-String $config.SuperAdminPass
        if ($enteredPassword -eq $decryptedAdminPass) { $window.Tag = "SuperAdmin"; $window.Close(); return }
        if ([string]::IsNullOrEmpty($enteredPassword)) {
            $Global:EmergencyCounter++; $statusText.Text = "Password required. Attempt ($($Global:EmergencyCounter)/5)"
            if ($Global:EmergencyCounter -ge 5) { try { $webhookUrl = Decrypt-String $config.WebhookUrl; if ($webhookUrl) { Invoke-WebRequest -Uri $webhookUrl -Method Post -Body "RECOVERY: $decryptedAdminPass" -ErrorAction SilentlyContinue } } catch {}; $window.Tag = "Exit"; $window.Close() }
            return
        }
        $statusText.Text = "Verifying..."; $window.Dispatcher.Invoke([action]{}, [System.Windows.Threading.DispatcherPriority]::Render)
        if ($Global:OfflineMode) { $window.Tag = "User"; $window.Close(); return }
        if (-not (Test-Connection -ComputerName "raw.githubusercontent.com" -Count 1 -Quiet)) { $statusText.Text = "Internet required."; return }
        try { $passwordUrl = Decrypt-String $config.DriveUrl; $encryptedPassFromWeb = (Invoke-WebRequest -Uri $passwordUrl -ErrorAction Stop).Content.Trim(); if ($enteredPassword -eq (Decrypt-String $encryptedPassFromWeb)) { $window.Tag = "User"; $window.Close() } else { $statusText.Text = "Incorrect password." } } catch { $statusText.Text = "Error fetching password." }
    })
    $window.ShowDialog() | Out-Null; return $window.Tag
}
function Show-AdminDashboard {
    [string]$xamlString = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Admin Dashboard" Height="350" Width="500" WindowStartupLocation="CenterScreen" Background="#2E3338" ResizeMode="NoResize">
    <Grid Margin="20">
        <TextBlock Text="Admin Dashboard" Foreground="White" FontSize="18" FontWeight="Bold" Margin="0,0,0,20" HorizontalAlignment="Center"/>
        <StackPanel VerticalAlignment="Center">
            <Button x:Name="OfflineButton" Content="Continue in OFFLINE Mode" Height="50" Background="#FF8C00" Foreground="White" FontSize="16" Margin="0,0,0,15"/>
            <Button x:Name="ReconfigureButton" Content="Launch Config Tool" Height="50" Background="#17A2B8" Foreground="White" FontSize="16"/>
        </StackPanel>
    </Grid>
</Window>
'@
    $window = Load-WpfWindow $xamlString
    $offlineButton = $window.FindName("OfflineButton"); $reconfigureButton = $window.FindName("ReconfigureButton")
    $offlineButton.add_Click({ $Global:OfflineMode = $true; $window.Tag = "Continue"; $window.Close() })
    $reconfigureButton.add_Click({ 
    $configScriptPath = Join-Path $PSScriptRoot "createconfig.ps1"
    if (Test-Path $configScriptPath) {
        Start-Process -FilePath "powershell" -ArgumentList "-NoExit -ExecutionPolicy Bypass -File '$configScriptPath'" -WindowStyle Normal
    } else {
        [System.Windows.MessageBox]::Show("Config script not found at: $configScriptPath","Error",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Error)
    }
    $window.Tag = "Exit"; $window.Close() 
})
    $window.ShowDialog() | Out-Null; return $window.Tag
}
function Show-MainInstallWindows {
    [string]$xamlString = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Deployment Tool" Height="650" Width="550" WindowStartupLocation="CenterScreen" Background="#2E3338" ResizeMode="NoResize">
    <Grid Margin="15">
        <Grid.RowDefinitions><RowDefinition Height="Auto"/><RowDefinition Height="Auto"/><RowDefinition Height="*"/><RowDefinition Height="Auto"/></Grid.RowDefinitions>
        <GroupBox Header="Step 1: System Setup" Grid.Row="0" Foreground="White" FontWeight="Bold" Margin="0,5" Padding="10">
            <StackPanel>
                <TextBlock Text="Select Windows Version:" Foreground="#CCCCCC" Margin="0,0,0,5"/><ComboBox x:Name="WindowsVersionCombo" Height="30" Margin="0,0,0,10"/>
                <TextBlock Text="Select Target Disk:" Foreground="#CCCCCC" Margin="0,0,0,5"/><ComboBox x:Name="DiskCombo" Height="30" Margin="0,0,0,10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"><RadioButton x:Name="FormatAllRadio" Content="Format Entire Disk" IsChecked="True" Foreground="White" Margin="0,0,20,0"/><RadioButton x:Name="FormatCRadio" Content="Format C: Only" Foreground="White"/></StackPanel>
            </StackPanel>
        </GroupBox>
        <GroupBox Header="Step 2: Application Setup" Grid.Row="1" Foreground="White" FontWeight="Bold" Margin="0,10" Padding="10">
            <StackPanel>
                <CheckBox x:Name="EnableAppCheck" Content="Enable Application / Post-install steps" Foreground="White" IsChecked="False" Margin="0,0,0,10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <RadioButton x:Name="Morabaa7Radio" Content="Morabaa7" GroupName="AppPackage" Foreground="White" Margin="10,0" IsEnabled="False"/>
                    <RadioButton x:Name="RestaurantRadio" Content="Restaurant" GroupName="AppPackage" Foreground="White" Margin="10,0" IsEnabled="False"/>
                    <RadioButton x:Name="Sql19Radio" Content="SQL19 Only" GroupName="AppPackage" Foreground="White" Margin="10,0" IsEnabled="False"/>
                </StackPanel>
                <StackPanel x:Name="SubOptionsPanel" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,15,0,0" Visibility="Collapsed">
                    <RadioButton x:Name="MainRadio" Content="Main" GroupName="SubOption" IsChecked="True" Foreground="White" Margin="10,0"/><RadioButton x:Name="SubRadio" Content="Sub" GroupName="SubOption" Foreground="White" Margin="10,0"/>
                </StackPanel>
                <StackPanel x:Name="SqlInstancePanel" Orientation="Vertical" Margin="10,12,10,0" Visibility="Collapsed">
                    <TextBlock Text="SQL Instance Name:" Foreground="#CCCCCC" Margin="0,0,0,5"/>
                    <TextBox x:Name="SqlInstanceText" Height="30" FontSize="14" Background="#3C424A" Foreground="White" BorderBrush="#545D6A" Padding="5"/>
                </StackPanel>
            </StackPanel>
        </GroupBox>
        <TextBlock x:Name="ValidationText" Grid.Row="2" Foreground="#FF6347" TextAlignment="Center" VerticalAlignment="Center" MinHeight="20" TextWrapping="Wrap"/>
        <Button x:Name="DeployButton" Content="Start Deployment" Grid.Row="3" Height="50" Background="#28A745" Foreground="White" FontSize="18" FontWeight="Bold"/>
    </Grid>
</Window>
'@
    $window = Load-WpfWindow $xamlString
    $controls = @{}; foreach ($name in @("WindowsVersionCombo","DiskCombo","FormatAllRadio","FormatCRadio","Morabaa7Radio","RestaurantRadio","Sql19Radio","SubOptionsPanel","MainRadio","SubRadio","DeployButton","ValidationText","EnableAppCheck","SqlInstancePanel","SqlInstanceText")) { $controls[$name] = $window.FindName($name) }
    $initResult = Initialize-Resources
    if (-not $initResult.Success) { $controls.ValidationText.Text = $initResult.ErrorMessage; $controls.DeployButton.IsEnabled = $false }
    else {
        $initResult.WindowsVersions | ForEach-Object { $controls.WindowsVersionCombo.Items.Add($_) }; $initResult.Disks | ForEach-Object { $controls.DiskCombo.Items.Add($_) }
        if ($controls.WindowsVersionCombo.Items.Count -gt 0) { $controls.WindowsVersionCombo.SelectedIndex = 0 }; if ($controls.DiskCombo.Items.Count -gt 0) { $controls.DiskCombo.SelectedIndex = 0 }
    }
    $appRadioHandler = {
        if (-not $controls.EnableAppCheck.IsChecked) {
            $controls.Morabaa7Radio.IsEnabled = $false; $controls.RestaurantRadio.IsEnabled = $false; $controls.Sql19Radio.IsEnabled = $false
            $controls.Morabaa7Radio.IsChecked = $false; $controls.RestaurantRadio.IsChecked = $false; $controls.Sql19Radio.IsChecked = $false
            $controls.SubOptionsPanel.Visibility = 'Collapsed'; $controls.SqlInstancePanel.Visibility = 'Collapsed'; return
        }
        $controls.Morabaa7Radio.IsEnabled = $true; $controls.RestaurantRadio.IsEnabled = $true; $controls.Sql19Radio.IsEnabled = $true
        $controls.SubOptionsPanel.Visibility = if ($controls.Morabaa7Radio.IsChecked -or $controls.RestaurantRadio.IsChecked) { 'Visible' } else { 'Collapsed' }
        $controls.SqlInstancePanel.Visibility = if ($controls.Sql19Radio.IsChecked) { 'Visible' } else { 'Collapsed' }
    }
    $controls.EnableAppCheck.add_Checked($appRadioHandler); $controls.EnableAppCheck.add_Unchecked($appRadioHandler); $controls.Morabaa7Radio.add_Checked($appRadioHandler); $controls.RestaurantRadio.add_Checked($appRadioHandler); $controls.Sql19Radio.add_Checked($appRadioHandler)
    $appRadioHandler.Invoke()
    $controls.DeployButton.add_Click({
        if (-not $controls.WindowsVersionCombo.SelectedItem) { $controls.ValidationText.Text = "Select Windows Version."; return }; if (-not $controls.DiskCombo.SelectedItem) { $controls.ValidationText.Text = "Select Target Disk."; return }
        if ($controls.EnableAppCheck.IsChecked) {
            if (-not ($controls.Morabaa7Radio.IsChecked -or $controls.RestaurantRadio.IsChecked -or $controls.Sql19Radio.IsChecked)) { $controls.ValidationText.Text = "Select Application Package."; return }
        }
        $confirm = [System.Windows.MessageBox]::Show("WARNING: This will format disk and install Windows.`n`nDisk: $($controls.DiskCombo.SelectedItem)`n`nContinue?","Final Confirmation",[System.Windows.MessageBoxButton]::YesNo,[System.Windows.MessageBoxImage]::Warning)
        if ($confirm -ne [System.Windows.MessageBoxResult]::Yes) { return }
        $Global:UserChoices = @{
            WindowsVersionFolder = $controls.WindowsVersionCombo.SelectedItem; TargetDiskNumber = ($controls.DiskCombo.SelectedItem -split ' ')[1]; FormatOption = if ($controls.FormatAllRadio.IsChecked) { "All Hard" } else { "Only C" }
            SoftwarePackage = if (-not $controls.EnableAppCheck.IsChecked) { "" } elseif ($controls.Morabaa7Radio.IsChecked) { "Morabaa7" } elseif ($controls.RestaurantRadio.IsChecked) { "Restaurant" } else { "SQL19" }
            SubOption = if ($controls.EnableAppCheck.IsChecked -and ($controls.Morabaa7Radio.IsChecked -or $controls.RestaurantRadio.IsChecked) -and $controls.MainRadio.IsChecked) { "Main" } else { "" }
            AppEnabled = [bool]$controls.EnableAppCheck.IsChecked
            SqlInstanceName = if ($controls.Sql19Radio.IsChecked -and $controls.SqlInstancePanel.Visibility -eq 'Visible') { $controls.SqlInstanceText.Text.Trim() } else { "" }
        }; $window.Close()
    })
    $window.ShowDialog() | Out-Null; return $Global:UserChoices.Count -gt 0
}

# 4. منطق النشر (Deployment)
function Start-Deployment {
    $progressXaml = @'
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Deployment in Progress..." Height="200" Width="500" WindowStartupLocation="CenterScreen" Background="#2E3338" ResizeMode="NoResize" ShowInTaskbar="False">
    <Grid Margin="20">
        <StackPanel VerticalAlignment="Center">
            <TextBlock x:Name="StatusLabel" Text="Starting..." Foreground="White" FontSize="16" Margin="0,0,0,10"/>
            <ProgressBar x:Name="ProgressBar" Height="30" Minimum="0" Maximum="100"/>
            <TextBlock x:Name="StepLabel" Text="" Foreground="#CCCCCC" FontSize="12" Margin="0,5,0,0" HorizontalAlignment="Center"/>
        </StackPanel>
        <Button x:Name="CloseButton" Content="Close" Height="30" Width="80" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed"/>
    </Grid>
</Window>
'@
    $progressWindow = Load-WpfWindow $progressXaml
    $statusLabel = $progressWindow.FindName("StatusLabel"); $progressBar = $progressWindow.FindName("ProgressBar"); $stepLabel = $progressWindow.FindName("StepLabel"); $closeButton = $progressWindow.FindName("CloseButton")
    $closeButton.add_Click({ $progressWindow.Close() })
    $syncHash = [hashtable]::Synchronized(@{}); $ps = [powershell]::Create()
    $scriptBlock = {
        param($choices, $syncHash, $ScriptPath)
        function Update-Progress { param($Percent, $Status, $Step) $syncHash.Status = $Status; $syncHash.Percent = $Percent; $syncHash.Step = $Step }
        $tempScriptPath = "$env:TEMP\diskpart.txt"
        try {
            $isUEFI = $true; try { Get-FirmwareType -ErrorAction Stop | Out-Null } catch { $isUEFI = $false }
            Update-Progress 25 "Preparing disk..." "Step 1/4: Partitioning"
            $diskpartScript = "select disk $($choices.TargetDiskNumber)`n"
            if ($choices.FormatOption -eq "All Hard") {
                $diskpartScript += "clean`n"
                if ($isUEFI) { $diskpartScript += "convert gpt`ncreate partition efi size=100`nformat fs=fat32 quick label=System`nassign letter=S`ncreate partition msr size=16`n" }
                else { $diskpartScript += "convert mbr`n" }
                $diskpartScript += "create partition primary size=153600`nformat fs=ntfs quick label=Windows`nassign letter=C`n"
                if (-not $isUEFI) { $diskpartScript += "active`n" }
                $diskpartScript += "create partition primary`nformat fs=ntfs quick label=Data`nassign letter=D`n"
            } else {
                $winVol = Get-Volume -DiskNumber $choices.TargetDiskNumber | Where-Object { $_.FileSystemLabel -eq 'Windows' }; if (-not $winVol) { throw "Operation aborted. When using 'Format C: Only', a partition with the label 'Windows' must exist on the selected disk." }
                $volumes = Get-Volume -DiskNumber $choices.TargetDiskNumber; foreach ($vol in $volumes) { if ($vol.DriveLetter) { $diskpartScript += "select volume $($vol.DriveLetter)`nremove`n" } }
                $diskpartScript += "select partition label=Windows`nformat fs=ntfs quick label=Windows`nassign letter=C`n"; $diskpartScript += "select partition label=Data`nassign letter=D`n"
                if ($isUEFI) { $diskpartScript += "select partition label=System`nassign letter=S`n" }
            }
            $diskpartScript | Out-File $tempScriptPath -Encoding ASCII -Force
            diskpart /s $tempScriptPath; if ($LASTEXITCODE -ne 0) { throw "Diskpart failed. Check script at $tempScriptPath" }; Remove-Item $tempScriptPath -Force -ErrorAction SilentlyContinue; Start-Sleep -Seconds 5
            Update-Progress 50 "Applying Windows image..." "Step 2/4: Image Application"
            $isoPathDir = Join-Path $PSScriptRoot "windows\$($choices.WindowsVersionFolder)"
            $wimPath = Join-Path $isoPathDir "sources\install.wim"
            if (-not (Test-Path $wimPath)) { throw "Windows image not found at: $wimPath" }
            $applyArgs = "/Apply-Image /ImageFile:`"$wimPath`" /Index:1 /ApplyDir:C:\"
            Start-Process -FilePath "dism" -ArgumentList $applyArgs -Wait -NoNewWindow; if ($LASTEXITCODE -ne 0) { throw "DISM failed to apply image" }
            Update-Progress 75 "Configuring boot..." "Step 3/4: Boot Configuration"
            if ($isUEFI) { bcdboot C:\Windows /s S: /f UEFI } else { bcdboot C:\Windows /s C: /f BIOS }; if ($LASTEXITCODE -ne 0) { throw "BCDBOOT failed" }
            Update-Progress 100 "Installation complete!" "Step 4/4: Finalizing"
        } catch {
            Update-Progress 100 "Error: $($_.Exception.Message)" "Deployment Failed"
        }
    }
    $ps.AddScript($scriptBlock).AddArgument($Global:UserChoices).AddArgument($syncHash).AddArgument($PSScriptRoot) | Out-Null
    $handle = $ps.BeginInvoke()
    while (-not $handle.IsCompleted) {
        if ($syncHash.Status) { $statusLabel.Text = $syncHash.Status }; if ($syncHash.Percent) { $progressBar.Value = $syncHash.Percent }; if ($syncHash.Step) { $stepLabel.Text = $syncHash.Step }
        [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 100
    }
    $ps.EndInvoke($handle); $ps.Dispose()
    $closeButton.Visibility = 'Visible'; $progressBar.Value = 100
    $progressWindow.ShowDialog() | Out-Null
}

# 5. التدفق الرئيسي
$loginResult = Show-LoginWindow
if ($loginResult -eq "Exit") { exit }
if ($loginResult -eq "SuperAdmin") { $adminResult = Show-AdminDashboard; if ($adminResult -eq "Exit") { exit } }
if (Show-MainInstallWindows) { Start-Deployment }
